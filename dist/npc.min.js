var npc =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/es6-docready/lib/doc-ready.js":
/*!****************************************************!*\
  !*** ./node_modules/es6-docready/lib/doc-ready.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = docReady;

function docReady(callback) {

    function completed() {
        document.removeEventListener("DOMContentLoaded", completed, false);
        window.removeEventListener("load", completed, false);
        callback();
    }

    //Events.on(document, 'DOMContentLoaded', completed)

    if (document.readyState === "complete") {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout(callback);
    } else {

        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed, false);

        // A fallback to window.onload, that will always work
        window.addEventListener("load", completed, false);
    }
}

module.exports = exports["default"];

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.replaceSelectOptions = exports.populateSelect = undefined;

var _es6Docready = __webpack_require__(/*! es6-docready */ "./node_modules/es6-docready/lib/doc-ready.js");

var _es6Docready2 = _interopRequireDefault(_es6Docready);

var _performance = __webpack_require__(/*! ./performance */ "./src/performance.js");

var _url = __webpack_require__(/*! ./url */ "./src/url.js");

var _linkDialog = __webpack_require__(/*! ./link-dialog */ "./src/link-dialog.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var nextPageCallback = function nextPageCallback(url, text, target) {
	document.querySelector('#npc_next_url').value = url;
};

var refreshCriticalURLs = function refreshCriticalURLs() {
	var criticalButton = document.querySelector('#npc_critical_urls_button');
	var criticalSelect = document.querySelector('#npc_critical_urls');
	console.log(criticalSelect.getAttribute('data-permalink'));
	criticalButton.setAttribute('disabled', 'disabled');
	criticalSelect.setAttribute('disabled', 'disabled');
	populateSelect(criticalSelect.getAttribute('data-permalink'), criticalSelect, function () {
		criticalButton.removeAttribute('disabled');
		criticalSelect.removeAttribute('disabled');
	});
};

(0, _es6Docready2.default)(function () {

	// Picker for the next URL.
	var nextPageInput = document.querySelector('#npc_next_url');
	var nextPageButton = document.querySelector('#npc_next_url_button');
	if (nextPageButton) {
		nextPageButton.addEventListener('click', function () {
			(0, _linkDialog.openLinkDialog)('npc_next_url', {
				url: nextPageInput.value,
				hasText: false,
				hasNewWindow: false
			}, nextPageCallback);
		});
	}

	var criticalButton = document.querySelector('#npc_critical_urls_button');
	if (criticalButton) {
		criticalButton.addEventListener('click', refreshCriticalURLs);
		refreshCriticalURLs();
	}
	// npc_critical_urls
	// const buttons = document.querySelectorAll( '.npc-refresh-page-urls' )
	// Array.from( buttons ).forEach( button => {
	// 	button.addEventListener( 'click', () => {
	// 		populateSelect( url, button )
	// 	} )
	// } )
});

var populateSelect = exports.populateSelect = function populateSelect(url, select) {
	var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

	var urlCallback = function urlCallback(urls) {
		var options = urls.map(function (url) {
			var type = (0, _url.getTypeURL)(url.name);
			var label = (0, _url.getShortDisplayURL)(url.name);
			var size = url.size / 1000;
			if (size <= 0) {
				size = '';
			} else {
				size = size.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 });
			}
			return {
				label: size ? '[' + type + '] ' + label + ' (' + size + 'kb)' : '[' + type + '] ' + label,
				value: url.name
			};
		});
		replaceSelectOptions(select, options);
		callback();
	};
	(0, _performance.getResourcesLoaded)(url, urlCallback);
};

/**
 * Replaces the options of the given element, retains selected options.
 *
 * @param {element} DomElement The <select> element
 * @param {options} Array The elements to replace the current options with
 */
var replaceSelectOptions = exports.replaceSelectOptions = function replaceSelectOptions(element, options) {

	// Get the currently selected value.
	var selectedOptions = element.querySelectorAll('option:checked');
	var selectedValues = Array.from(selectedOptions).map(function (opt) {
		return opt.value;
	});

	// Clear all values.
	Array.from(element.children).forEach(function (opt) {
		return opt.remove();
	});

	// Replace the options with the new ones.
	options.forEach(function (data) {
		var newOpt = document.createElement('option');
		newOpt.setAttribute('value', data.value);

		// Set as selected if the previous value was selected.
		if (selectedValues.includes(data.value)) {
			newOpt.setAttribute('selected', '');
		}

		newOpt.innerHTML = data.label;
		element.appendChild(newOpt);
	});
};

/***/ }),

/***/ "./src/link-dialog.js":
/*!****************************!*\
  !*** ./src/link-dialog.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var openLinkDialog = exports.openLinkDialog = function openLinkDialog(inputID, args, callback) {

	if ('undefined' === typeof args) {
		args = {};
	}

	// Open the link dialog box.
	// @see http://stackoverflow.com/questions/11812929/use-wordpress-link-insert-dialog-in-metabox
	// wpLink.open( 'dummy-wplink-textarea' );
	wpLink.open(inputID);

	// Set the field values.
	// #link-options are backward compatible with 4.1.x.
	document.querySelector('#wp-link-url, #link-options #url-field').value = args.url || '';
	document.querySelector('#wp-link-text, #link-options #link-title-field').value = args.text || '';
	document.querySelector('#wp-link-target, #link-options #link-target-checkbox').checked = !!args.target;

	// Show / hide the text field if needed.
	if ('undefined' === typeof args.hasText) {
		document.querySelector('#wp-link-wrap').classList.add('has-text-field');
	} else if (args.hasText) {
		document.querySelector('#wp-link-wrap').classList.add('has-text-field');
	} else {
		document.querySelector('#wp-link-wrap').classList.remove('has-text-field');
	}

	// Show / hide the new window checkbox.
	if ('undefined' === typeof args.hasNewWindow) {
		document.querySelector('#wp-link .link-target').style.display = '';
	} else {
		document.querySelector('#wp-link .link-target').style.display = args.hasNewWindow ? '' : 'none';
	}

	// Create our handler;
	var clickHandler = function clickHandler() {

		// #link-options are backward compatible with 4.1.x.
		var url = document.querySelector('#wp-link-url, #link-options #url-field').value,
		    text = document.querySelector('#wp-link-text, #link-options #link-title-field').value,
		    target = document.querySelector('#wp-link-target, #link-options #link-target-checkbox').checked;

		// Callback.
		callback(url, text, target);

		// Remove the click handler.
		document.querySelector('#wp-link-submit').removeEventListener('click', clickHandler);

		// Close the dialog.
		wpLink.close();
	};

	// Set the click handler.
	document.querySelector('#wp-link-submit').addEventListener('click', clickHandler);
};

/***/ }),

/***/ "./src/performance.js":
/*!****************************!*\
  !*** ./src/performance.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * Sorts a URL array by time loaded if available, if cached, sorts by file size.
 *
 * @param {urlArray} Array Array of PerformanceEntry
 *
 * @return Array Sorted PerformanceEntry array
 */
var sortURLs = exports.sortURLs = function sortURLs(urlArray) {
	var hasZeroTime = false;
	urlArray.sort(function (a, b) {
		if (!a.time || !b.time) {
			hasZeroTime = true;
		}
		return b.time - a.time;
	});
	if (hasZeroTime) {
		urlArray.sort(function (a, b) {
			return b.size - a.size;
		});
	}
	return urlArray;
};

/**
 * Gets the size by bytes of a PerformanceEntry.
 *
 * @param {perfEntry} PerformanceEntry
 *
 * @param Number Size in bytes
 */
var getPerfSize = exports.getPerfSize = function getPerfSize(perfEntry) {
	return perfEntry.decodedBodySize || perfEntry.encodedBodySize || perfEntry.transferSize || 0;
};

/**
 * Gets the time duration of a PerformanceEntry. Units aren't reliable, can be
 * given by browsers as ms or seconds.
 *
 * @param {perfEntry} PerformanceEntry
 *
 * @param Number Time in ms or seconds
 */
var getPerfTime = exports.getPerfTime = function getPerfTime(perfEntry) {
	return perfEntry.duration || 0;
};

/**
 * Onload callback on an iframe, called internally by getResourcesLoaded.
 *
 * @param {iframe} DomElement The iframe to wait for
 * @param {callback} Function Called after onload
 */
var onIframeLoad = function onIframeLoad(iframe) {
	var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

	setTimeout(function () {
		var entriesArray = [];
		try {
			var perfEntries = iframe.contentWindow.performance.getEntriesByType('resource');
			entriesArray = perfEntries.map(function (perfEntry) {
				return {
					size: getPerfSize(perfEntry),
					time: getPerfTime(perfEntry),
					name: perfEntry.name
				};
			});
		} catch (err) {
			console.error('[Next Page Caching] cannot get performance metrics: ' + err);
		}
		iframe.remove();
		callback(sortURLs(entriesArray));
	}, 5000);
};

/**
 * Loads a URL, then gets the resource URLs loaded sorted by largest filesize
 * or longest loading time (depending whether the resources were cached).
 *
 * @param {url} String The URL to load
 * @param {callback} Fucntion The function to call after loading, the resource
 *                            URLs loaded are passed to the function.
 *
 * @return DomElement The iframe temporarily created to do the loading.
 */
var getResourcesLoaded = exports.getResourcesLoaded = function getResourcesLoaded(url, callback) {
	var iframe = document.createElement('iframe');
	iframe.onload = onIframeLoad(iframe, callback);
	iframe.setAttribute('src', url);
	iframe.style.width = '1px';
	iframe.style.height = '1px';
	// iframe.style.visibility = 'hidden'
	// iframe.style.position = 'absolute'
	iframe.style.top = 0;
	iframe.style.left = 0;
	document.body.appendChild(iframe);
	iframe.contentWindow.performance.clearResourceTimings();
	return iframe;
};

/***/ }),

/***/ "./src/url.js":
/*!********************!*\
  !*** ./src/url.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getTypeURL = exports.getShortDisplayURL = undefined;

var _path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Gets a shorter version of a URL for display purposes.
 * http://domain.com/ -> http://domain.com
 * http://domain.com/wp-content -> http://domain.com/wp-content
 * http://domain.com/wp-content/plugins -> http://domain.com/wp-content/plugins
 * http://domain.com/wp-content/plugins/name -> http://domain.com/wp-content/plugins/name
 * http://domain.com/wp-content/plugins/name/js/script.js -> http://domain.com/wp-content/plugins/.../script.js
 *
 * @param {url} String URL
 *
 * @return String Short URL
 */
var getShortDisplayURL = exports.getShortDisplayURL = function getShortDisplayURL(url) {
	var parts = new URL(url);
	var numSlashes = [].concat(_toConsumableArray(parts.pathname)).filter(function (l) {
		return l === '/';
	}).length;
	if (numSlashes > 4) {
		var base = (0, _path.basename)(parts.pathname);
		var startPath = parts.pathname.replace(/(^\/.*?\/.*?\/.*?\/)(.*)$/, '$1');
		return '' + parts.origin + startPath + '.../' + base;
	} else {
		return '' + parts.origin + parts.pathname;
	}
	return parts.origin;
};

/**
 * Returns the type of the URL for use in the `as` attribute of a <link>.
 * Similar to our PHP npc_get_type()
 *
 * @param {url} String The URL
 *
 * @return String The type
 *
 * @see https://www.w3.org/TR/preload/#x3-2-as-attribute
 */
var getTypeURL = exports.getTypeURL = function getTypeURL(url) {
	var parts = new URL(url);
	var path = parts.pathname;
	if (path.match(/.js$/)) {
		return 'script';
	} else if (path.match(/.css$/)) {
		return 'style';
	} else if (path.match(/.(jpe?g|gif|png|svg)$/)) {
		return 'image';
	} else if (path.match(/.(eot|woff2?|ttf)$/)) {
		return 'font';
	}
	return 'html';
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,